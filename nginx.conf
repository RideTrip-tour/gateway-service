worker_processes auto;
events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    access_log  /var/log/nginx/access.log;

    # Добавляем заголовки
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Включение HTTPS
    server {
        listen 80;

        # Перенаправление на HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;

        # Путь к SSL сертификатам
        ssl_certificate /etc/nginx/ssl/tls.crt;
        ssl_certificate_key /etc/nginx/ssl/tls.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';

        # Логирование
        access_log  /var/log/nginx/access.log;

        # Зоны кеширования
        proxy_cache_path /var/cache/nginx/bot_cache levels=1:2 keys_zone=bot_cache:10m max_size=100m inactive=60m use_temp_path=off;

        # Конфигурация для каждого из микросервисов
        location /auth {
            auth_request /auth_check;
            proxy_pass http://$AUTH_SERVICE_URL;
        }

        location /users {
            auth_request /auth_check;
            proxy_pass http://$USERS_SERVICE_URL;
        }

        location /activities {
            auth_request /auth_check;
            proxy_pass http://$ACTIVITIES_SERVICE_URL;
        }

        location /pricing {
            auth_request /auth_check;
            proxy_pass http://$PRICING_SERVICE_URL;
        }

        location /plans {
            auth_request /auth_check;
            proxy_pass http://$PLANS_SERVICE_URL;
        }

        location /routes {
            auth_request /auth_check;
            proxy_pass http://$ROUTES_SERVICE_URL;
        }

        location /bot {
            auth_request /auth_check;
            proxy_pass http://$BOT_SERVICE_URL;
            # Включаем кеширование
            proxy_cache bot_cache;
            proxy_cache_valid 200 1h;
        }

        location = /auth_check {
            internal;
            proxy_pass http://$AUTH_CHECK_SERVICE_URL;
            error_page 401 = @unauthorized;
        }

        location @unauthorized {
            return 403 'Unauthorized access';
        }
    }
}